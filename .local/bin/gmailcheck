#!/usr/bin/env python
# -*- coding: utf-8 -*-

#author: tgorochowik@gmail.com

from pycurl import Curl
from io import BytesIO
from re import search
from os.path import exists, expanduser
from sys import stderr, argv
import argparse
from xml.dom.minidom import parseString


parser=argparse.ArgumentParser()

parser.add_argument('-c',
                    action='store_true',
                    dest='content',
                    help='show content of messages')

parser.add_argument('-t',
                    type=int,
                    default=1000,
                    dest='to',
                    help='curl timeout in miliseconds')

args=parser.parse_args()

def main():
    # init variables
    c = Curl()
    b = BytesIO()
    count = ""
    content = ""

    # check if netrc exists
    if not exists(expanduser("~/.netrc")):
        print("Error: ~/.netrc file not found", file=stderr)
        return -1

    # download xml
    try:
        c.setopt(c.URL, 'https://mail.google.com/mail/feed/atom')

        c.setopt(c.NETRC, c.NETRC_REQUIRED)
        c.setopt(c.WRITEFUNCTION, b.write)
        c.setopt(c.TIMEOUT_MS, args.to)

        c.perform()
        c.close()

        # parse it
        content = b.getvalue().decode('utf-8')
        count = search('<fullcount>(.*)</fullcount>', content).group(1)
    except:
        count = "-1"

    if int(count) > 0 and args.content:
        dom = parseString(content)
        titles_raw = dom.getElementsByTagName("title")
        titles_raw = titles_raw[1:]
        authors_raw = dom.getElementsByTagName("email")
        longest = 0

        authors = []
        titles = []
        for i in range(0,len(titles_raw)):
            titles.append(search('>(.*)<',titles_raw[i].toxml()).group(1))
            authors.append(search('>(.*)<',authors_raw[i].toxml()).group(1))

        for a in authors:
            if len(a) > longest:
                longest = len(a)

        template = ""
        for i in range(0,longest):
            template = template + " "

        for i in range(0,len(titles)):
            a = authors[i]
            t = titles[i]
            a = template[:longest-len(a)]+a

            print(a+": "+t)
    else:
        print(count)

if __name__ == "__main__":
    main()
